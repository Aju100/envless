// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider              = "mysql"
  url                   = env("DATABASE_URL")
  shadowDatabaseUrl     = env("SHADOW_DATABASE_URL")
  referentialIntegrity  = "prisma"
}

model Team {
  id        String   @id @default(cuid())
  name      String   @default("Personal")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   Access[]
  projects  Project[]
}

model Access {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team?    @relation(fields: [teamId], references: [id])
  teamId    String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  role      String?
}

model Project {
  id        String   @id @default(cuid())
  teamId    String
  userId    String?  // This is only for the user's personal projects
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     User?    @relation(fields: [userId], references: [id])  // This is only for the user's personal projects
  team      Team?    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  branches  Branch[]
}

model Branch {
  id        String   @id @default(cuid())
  projectId String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  envs      Env[]
}

model Env {
  id        String   @id @default(cuid())
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  branchId String
  branch   Branch  @relation(fields: [branchId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  created_at        Int?
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  projects      Project[] // This is only for the user's personal projects
  sessions      Session[]
  teams         Access[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
